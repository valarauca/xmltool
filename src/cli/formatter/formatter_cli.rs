
use super::super::super::clap::{SubCommand, Arg, App};

pub fn declare_format<'a,'b>() -> App<'a,'b> {
    SubCommand::with_name("reformat")
        .version("1.0.0")
        .about("Reformats an XML file")
        .set_term_width(80)
        .arg(Arg::with_name("EOL")
             .short("l")
             .long("eol")
             .takes_value(true)
             .multiple(false)
             .value_name("CHARACTER")
             .possible_values(&["CR", "CRLF", "LFCR", "LF", "NONE"])
             .default_value("CRLF")
             .required(true)
             .help("What EOL character to emit"))
        .arg(Arg::with_name("INDENT")
             .short("d")
             .long("indent")
             .takes_value(true)
             .multiple(false)
             .value_name("INDENT-LEVEl")
             .possible_values(&["0", "1", "2", "3", "4", "5", "6", "7", "8", "TAB"])
             .default_value("2")
             .required(true)
             .help("How many spaces to indent"))
        .arg(Arg::with_name("ESCAPE")
             .long("no-escape")
             .help("If present this will not escape characters"))
        .arg(Arg::with_name("DOC-DEC")
             .long("no-doc-dec")
             .help("If present this will not emit the document declartion"))
        .arg(Arg::with_name("NORMALIZE")
             .long("normalize")
             .help("If present this will normalize empty elements. I.E.: `<a></a>` will be come `<a/>`"))
        .arg(Arg::with_name("CDATA-OUT")
             .long("emit-cdata-char")
             .help("If present this will convert CDATA into regular characters"))
        .arg(Arg::with_name("PAD-COMMENTS")
             .long("no-pad-comments")
             .help("If present this will autopad comments. I.E.: `<!--something-->` will become `<!-- something -->"))
        .arg(Arg::with_name("TRIM-WHITESPACE")
             .long("trim-whitespace")
             .help("If present this will trim whitespace of loaded XML"))
        .arg(Arg::with_name("IGNORE-COMMENTS")
             .long("ignore-comments")
             .help("If present this will skip comments of loaded XML"))
        .arg(Arg::with_name("STDIN")
             .short("s")
             .long("stdin")
             .conflicts_with("INPUT")
             .required_unless("INPUT")
             .help("Read XML from STDIN"))
        .arg(Arg::with_name("INPUT")
             .index(1)
             .conflicts_with("STDIN")
             .required_unless("STDIN")
             .takes_value(true)
             .multiple(false)
             .value_name("XML-IN")
             .help("XML file to read"))
        .arg(Arg::with_name("STDOUT")
             .short("o")
             .long("stdout")
             .conflicts_with("OUTPUT")
             .required_unless("OUTPUT")
             .help("Writes XML to output"))
        .arg(Arg::with_name("OUTPUT")
             .index(2)
             .conflicts_with("STDOUT")
             .required_unless("STDOUT")
             .takes_value(true)
             .multiple(false)
             .value_name("XML-OUT")
             .help("XML file to write"))
}
